name: Release

on:
  push:
    tags: '*'

env:
  MSVC_CONFIG: RelWithDebInfo

jobs:
  create_release:
    runs-on: ubuntu-24.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      git_tag: ${{ steps.get-git-tag.outputs.name }}

    steps:
      - name: Get Git tag
        id: get-git-tag
        run: echo "name=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-git-tag.outputs.name }}
          release_name: LOOT Metadata Validator v${{ steps.get-git-tag.outputs.name }}
          body: |
            Windows users should download the file with the `7z` file extension. It requires Windows 10 64-bit or later and the [MSVC 2022 x64 redistributable]https://aka.ms/vs/17/release/vc_redist.x64.exe), and [7-Zip](http://www.7-zip.org/) to extract the archive.

            The `metadata-validator.tar.xz` file contains a Linux binary.

  build:
    strategy:
      matrix:
        target:
          - runner-image: windows-2025
            triple: x86_64-pc-windows-msvc
          - runner-image: ubuntu-24.04
            triple: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.target.runner-image }}

    needs: create_release

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install the Rust target
        run: rustup target add ${{ matrix.target.triple }}

      - name: Run build
        run: cargo build --release

      - name: Get descriptive version
        id: get-version
        shell: bash
        run: |
          GIT_DESCRIBE=$(git describe --tags --long --abbrev=7)
          GIT_REF_SUFFIX=${GIT_REF#refs/*/}
          DESC_REF=${GIT_DESCRIBE}_${GIT_REF_SUFFIX}
          SAFE_DESC_REF=${DESC_REF//[\/<>\"|]/_}
          SAFE_GIT_REF_SUFFIX=${GIT_REF_SUFFIX//[\/<>\"|]/_}
          echo "version=$SAFE_DESC_REF" >> $GITHUB_OUTPUT
          echo "ref=$SAFE_GIT_REF_SUFFIX" >> $GITHUB_OUTPUT

      - name: Build archive
        id: build-archive
        shell: bash
        run: |
          python scripts/archive.py . "${{ steps.get-version.outputs.ref }}" --triple ${{ matrix.target.triple }}

          VERSION="${{ steps.get-version.outputs.version }}"

          if [[ "${{ runner.os }}" == "Windows" ]]
          then
            echo "filename=metadata-validator-${VERSION}-win64.7z" >> $GITHUB_OUTPUT
          else
            echo "filename=metadata-validator-${VERSION}-Linux.tar.xz" >> $GITHUB_OUTPUT
          fi

      - name: Upload Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: target/package/${{ steps.build-archive.outputs.filename }}
          asset_name: ${{ steps.build-archive.outputs.filename }}
          asset_content_type: application/x-7z-compressed
