name: Release

on:
  push:
    tags: '*'

env:
  MSVC_CONFIG: RelWithDebInfo

jobs:
  create_release:
    runs-on: ubuntu-24.04

    steps:
      - name: Create a draft GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG="${{ github.ref_name }}"
          RELEASE_TITLE="LOOT Metadata Validator v$RELEASE_TAG"
          RELEASE_NOTES="$(printf "Windows users should download the file with the \`7z\` file extension. It requires Windows 10 64-bit or later and the [MSVC 2022 x64 redistributable](https://aka.ms/vs/17/release/vc_redist.x64.exe), and [7-Zip](http://www.7-zip.org/) to extract the archive.\n\nThe \`metadata-validator.tar.xz\` file contains a Linux binary.")"

          gh release create --draft --title "$RELEASE_TITLE" --notes "$RELEASE_NOTES" --verify-tag --repo "${{ github.repository }}" "$RELEASE_TAG"

  build:
    strategy:
      matrix:
        target:
          - runner-image: windows-2025
            triple: x86_64-pc-windows-msvc
          - runner-image: ubuntu-24.04
            triple: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.target.runner-image }}

    needs: create_release

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install the Rust target
        run: rustup target add ${{ matrix.target.triple }}

      - name: Run build
        run: cargo build --release --target ${{ matrix.target.triple }}

      - name: Get descriptive version
        id: get-version
        shell: bash
        run: |
          GIT_DESCRIBE=$(git describe --tags --long --abbrev=7)
          GIT_REF_SUFFIX=${GIT_REF#refs/*/}
          DESC_REF=${GIT_DESCRIBE}_${GIT_REF_SUFFIX}
          SAFE_DESC_REF=${DESC_REF//[\/<>\"|]/_}
          SAFE_GIT_REF_SUFFIX=${GIT_REF_SUFFIX//[\/<>\"|]/_}
          echo "version=$SAFE_DESC_REF" >> $GITHUB_OUTPUT
          echo "ref=$SAFE_GIT_REF_SUFFIX" >> $GITHUB_OUTPUT

      - name: Build archive
        id: build-archive
        shell: bash
        run: |
          python scripts/archive.py . "${{ steps.get-version.outputs.ref }}" --triple ${{ matrix.target.triple }}

          VERSION="${{ steps.get-version.outputs.version }}"

          if [[ "${{ runner.os }}" == "Windows" ]]
          then
            echo "filename=metadata-validator-${VERSION}-win64.7z" >> $GITHUB_OUTPUT
          else
            echo "filename=metadata-validator-${VERSION}-Linux.tar.xz" >> $GITHUB_OUTPUT
          fi

      - name: Upload archive to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload --repo "${{ github.repository }}" "${{ github.ref_name }}" target/package/${{ steps.build-archive.outputs.filename }}#${{ steps.build-archive.outputs.filename }}
